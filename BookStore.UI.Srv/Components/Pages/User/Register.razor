@page "/users/register"
@inject IClient httpClient
@inject NavigationManager NavigationManager

<h3>Register new account</h3>

@if (string.IsNullOrEmpty(message) == false)
{
    <div class="alert alert-danger">
        <p>@message</p>
    </div>
}

<div class="card-body">
    <EditForm Model="RegistrationModel" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">E-mail address</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.Email" />
            <ValidationMessage For="@(() => RegistrationModel.Email)" />
        </div>
        <div class="form-group">
            <label for="firstName">First name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.FirstName" />
            <ValidationMessage For="@(() => RegistrationModel.FirstName)" />
        </div>
        <div class="form-group">
            <label for="lastName">Last name</label>
            <InputText class="form-control" @bind-Value="RegistrationModel.LastName" />
            <ValidationMessage For="@(() => RegistrationModel.LastName)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationModel.Password" />
            <ValidationMessage For="@(() => RegistrationModel.Password)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary btn-block">Register</button>

    </EditForm>
</div>

@code {
    UserDto RegistrationModel = new UserDto
    {
         Role = "User"
    };
    string message = string.Empty;


    private async Task HandleRegistration()
    {
        RegistrationModel.Role = "User";
        try
        {
            await httpClient.RegisterAsync(RegistrationModel);
            NavigationManager.NavigateTo("/users/login");
        }
        catch (ApiException ex)
        {
            if (ex.StatusCode >=200 && ex.StatusCode <=299)
            {
                NavigationManager.NavigateTo("/users/login");
            }
            message = ex.Message;

        }
        catch (Exception ex)
        {
            message = ex.Message;
        }

    }
}
